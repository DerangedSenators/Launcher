
buildscript {
    ext.kotlin_version = '1.4.21'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}
def properties = new Properties()
File propFile = new File('build.prop')
propFile.withInputStream() {
    properties.load(it)
}
group 'me.derangedsenators'
version '1.0.0'
apply plugin: 'java'
apply plugin: 'kotlin'
jar{
    manifest{
        attributes(
                'Main-Class': 'me.derangedsenators.launcher.MainKT'

        )
    }
    baseName =  "${properties."app.name"}"
    version =  """${properties."ver.major"}.${properties."ver.minor"}.${properties."ver.revision"}.${properties."app.channel"}.${getGitHash()}-${getDate()}"""
   //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'com.jfoenix:jfoenix:9.0.10'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls','javafx.fxml' ]
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


static def getDateWithDash(){
    return new Date().format('dd-MM-yyyy-HH:mm')
}
static def getDate() {
    return new Date().format('yyyyMMddHHmm')
}

def getGitHash(){
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
updateManifest()
def updateManifest(){
    // updates the java manifest file
    def properties = new Properties()
    File propFile = new File('build.prop')
    propFile.withInputStream(){
        properties.load(it)
    }

    String head = '''
// AUTO GENERATED BY GRADLE run gradle build in the repo root folder to generate the latest manifest from the build.prop
package me.derangedsenators.launcher;
/**
* Manifest contains public static final strings which hold important information about the application such as versions
*/
public final class ApplicationManifest{
'''
    String tail = '}'
    String firstWords = 'public static final'
    String majorVersion = properties."ver.major"
    String minorVersion = properties."ver.minor"
    String revisionVersion = properties."ver.revision"
    String channel = properties."app.channel"
    String content = """${firstWords} String APPLICATION_NAME = "${properties."app.name"}" ;
    ${firstWords} int  MAJOR_VERSION =  ${majorVersion};
    ${firstWords} int  MINOR_VERSION =  ${minorVersion};
    ${firstWords} int  REVISION =  ${revisionVersion};
    ${firstWords} String CHANNEL = "${channel}";
    ${firstWords} String BUILD_DATE = "${getDateWithDash()}";
    ${firstWords} String BUILD_COMMIT = "${getGitHash()}";
    public static final String SEMANTIC_APPLICATION_VERSION = MAJOR_VERSION + "." + MINOR_VERSION + "." + REVISION; \n"""
    String toWrite = head + content + tail
    File manifest = new File('src/main/java/me/derangedsenators/launcher/ApplicationManifest.java')
    manifest.write(toWrite)
    println("""
MANIFEST INFROMATION:
APPLICATION NAME = ${properties."app.name"}
BUILD CHANNEL = ${properties."app.channel"}
APPLICATION VERSION = ${properties."ver.major"}.${properties."ver.minor"}.${properties."ver.revision"}
BUILD STAMP = ${getDateWithDash()}
BUILD COMMIT = ${getGitHash()}
BUILD OUTPUT: build/libs/${properties."app.name"}-${properties."ver.major"}.${properties."ver.minor"}.${properties."ver.revision"}.${properties."app.channel"}.${getGitHash()}-${getDate()}.jar
""")
}
